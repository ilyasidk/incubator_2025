САМО ЗАДАНИЕ
# Flashcards Master

Приложение для изучения карточек по темам. Пользователь отвечает на вопрос, переворачивает карточку и отслеживает прогресс. UI может быть реализован как web-приложение, так и iOS-приложение.

![image.png](attachment:1e3c633e-86c7-4811-8437-2e64877aaac9:image.png)

## **Обязательные требования**

- Проект должен быть размещён в публичном репозитории на GitHub.
- Обязательно наличие файла `README.md`, содержащего:
    - Краткое описание проекта.
    - Инструкции по установке и запуску.
    - Описание процесса проектирования и разработки.
    - Информацию об уникальных подходах или методологиях, использованных в работе.
    - Обсуждение компромиссов, принятых во время разработки.
    - Описание известных ошибок или проблем в приложении.
    - Объясните почему выбрали этот технический стэк
- Запишите короткое видео-демо (до 2–3 минут) с обзором вашего проекта, где вы перечислите все вышеуказанные пункты**.** Для записи видео можно использовать любую удобную платформу (например, Loom.com, OBS Studio, Zoom с записью экрана и т.д.).
- Zip-файлы не принимаются
- Убедитесь, что репозиторий публичен
- Все внешние сервисы (external API's and services) должны быть вызваны с серверной части приложения.
- Убедитесь в работоспособности проекта, если будете деплоить

## **Уровни**

### **Уровень 1 — UI-интерфейс (web или iOS)**

- Карточки по выбранной теме: вопрос/ответ (flip).
- Кнопки: знаю / не знаю. Прогресс по теме.
- UX: удобное переключение карточек, визуальный отклик на действия.

### **Уровень 2 — Backend и API**

- Получение карточек с API (например, OpenTDB) через backend.
- Хранение прогресса пользователя на сервере.
- API должен позволять получать карточки по теме, сохранять и возвращать прогресс.

### **Уровень 3 — Деплой**

- Задеплойте frontend и backend на выбранных сервисах (например, Vercel, Netlify, Render, Railway).
- Для iOS необходимо задеплоить только backend.
- Проверьте, что прогресс сохраняется между сессиями, карточки корректно загружаются.
- Edge-cases: сброс прогресса после деплоя, ошибки загрузки карточек, проблемы с авторизацией (если есть).

### **Уровень 4 — Бонус: AI/LLM-генератор карточек**

- Интегрируйте LLM, который может генерировать новые карточки по теме или объяснять правильный ответ.
- Пользователь может запросить генерацию карточек по своей теме с помощью LLM.
- UX: поле для ввода темы, генерация карточек, возможность редактировать результат.

ДАЛЬШЕ УЖЕ ПЛАН Т ТД

## Проект "Flashcards Master" — Уровень 4: Полная реализация с генерацией AI-карточек

### 1. Краткое описание
Приложение "Flashcards Master" — веб-приложение для эффективного изучения карточек по темам. Пользователь получает вопрос, отвечает, переворачивает карточку, сохраняет прогресс и может генерировать новые карточки по заданной теме при помощи LLM.

### 2. Технический стек
- **Frontend:** JavaScript (ES6+), Tailwind CSS
- **Backend:** Node.js (Express.js)
- **База данных:** MongoDB (Atlas)
- **AI/LLM:** Gemini
- **Аутентификация:** JWT (JSON Web Tokens)
- **Хостинг :** Google Cloud Run
- **CI/CD:** GitHub Actions

### 3. Архитектура и модули

#### 3.1. Фронтенд
- **Компоненты:**
  - `Flashcard`: отображает вопрос и ответ с flip-анимацией
  - `ProgressTracker`: отображает статистику (процент выученных карточек)
  - `TopicSelector`: выбирает темы и запускает генерацию карточек через LLM
  - `Login`, `Register`: формы аутентификации
- **Страницы:**
  - Главная (список тем)
  - Сессия обучения (карточки, кнопки "Знаю" / "Не знаю")
  - Генератор карточек (поле ввода темы)
  - Профиль (прогресс пользователя)

#### 3.2. Бэкенд (Node.js + Express)
- **Маршруты API:**
  - `POST /api/auth/register` — регистрация
  - `POST /api/auth/login` — вход, выдача JWT
  - `GET /api/topics` — список доступных тем
  - `GET /api/cards?topic={topicId}` — получение карточек из БД
  - `POST /api/progress` — сохранение прогресса (userId, topicId, stats)
  - `GET /api/progress?userId={userId}` — получение прогресса по всем темам
  - `POST /api/generate` — генерация карточек по теме через LLM
- **Middleware:**
  - Аутентификация JWT
  - Лимит запросов к LLM (rate limit)
  - Обработка ошибок

#### 3.3. База данных (MongoDB)
- **Коллекции:**
  - `users`:
    - `_id`, `email`, `passwordHash`, `createdAt`
  - `topics`:
    - `_id`, `name`, `description`
  - `cards`:
    - `_id`, `topicId`, `question`, `answer`, `source` (API или LLM)
  - `progress`:
    - `_id`, `userId`, `topicId`, `knownCount`, `unknownCount`, `lastActive`

### 4. Интеграция AI/LLM
- Запросы к OpenAI GPT-4:
  - Параметры: системное сообщение описывает формат `{"question": ..., "answer": ...}`
  - Запрос: "Сгенерируй 10 карточек по теме X"
  - Обработка: парсинг JSON и сохранение в коллекцию `cards`
- UX: поле ввода темы, кнопка "Сгенерировать"; после генерации появляется превью карточек с возможностью редактирования до сохранения

### 5. Деплой и инфраструктура
- **Backend и фроентенд:** Docker-контейнер с Node.js, деплой на Google Cloud Run
- **Переменные окружения:**
  - `MONGODB_URI`, `JWT_SECRET`, `OPENAI_API_KEY`, `GCP_PROJECT_ID`
- **CI/CD:**
  - GitHub Actions для автоматической сборки и деплоя при пуше в main

### 6. План работ на 2 дня

| День | Задачи |
|------|--------|
| **1** | - Инициализация репозитория, Docker, CI/CD (`README.md`, структура каталогов)
- Реализация моделей данных (MongoDB) и основной логики API (Express)
- Настройка аутентификации (JWT), регистрация/логин
- Базовый фронтенд: аутентификация, список тем, показ карточек (статическая JSON)
- Деплой backend на Cloud Run (тестовые эндпоинты)
| **2** | - Интеграция с MongoDB: CRUD для карточек и прогресса
- Реализация AI-генератора карточек (API + фронтенд)
- Финальный UI: flip-анимация, кнопки "Знаю" / "Не знаю", прогресс
- Тестирование, багфикс, подготовка демо-видео
- Написание полного `README.md` с описанием, инструкциями, компромиссами и методологиями |

### 7. README.md — структура и содержание
1. Описание проекта
2. Технический стек и причины выбора
3. Установка и запуск (локально и в проде)
4. Процесс проектирования и разработки
5. Уникальные подходы (AI-генерация, flip-UX)
6. Компромиссы (время, упрощения)
7. Известные баги
8. Видео-демо (ссылка)

### 8. Видео-демо
- **Продолжительность:** 2–3 минуты
- **Сценарий:**
  - Кратко о проекте и стеке
  - Демонстрация UI: flip-карточки, прогресс
  - Демонстрация генератора AI-карточек
  - Кратко о архитектуре и решениях
  - Ссылка на GitHub и деплой

---
*Готово к реализации за 2 дня!*


@Web
внимательно все обдумай и составь пошаговый план по релазиациии